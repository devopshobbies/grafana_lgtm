kind: MetricsInstance
metadata:
  name: primary
  namespace: grafana-agent
  labels:
    agent: grafana-agent-metrics # This label must match the <<metrics.instanceSelector.matchLabels>> of your GrafanaAgent resource
spec:
  remoteWrite:
  - url: http://mimir-nginx.mimir/api/v1/push
    headers:
      X-Scope-OrgID: pods # Using this header is OPTIONAL, Multi-tenancy feature of mimir allows you to store metrics inside seperate tenants. in this example i prefer to store pods metrics inside <<pods>> tenant

  # Supply an empty namespace selector to look in all namespaces. Remove
  # this to only look in the same namespace as the MetricsInstance CR
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector:
    matchLabels:
      instance: primary # Your serviceMonitor resources must include this label to be detected by the MetricsInstance Resource

  # Supply an empty namespace selector to look in all namespaces. Remove
  # this to only look in the same namespace as the MetricsInstance CR.
  podMonitorNamespaceSelector: {}
  podMonitorSelector:
    matchLabels:
      instance: primary # Your podMonitor resources must include this label to be detected by the MetricsInstance Resource

  # Supply an empty namespace selector to look in all namespaces. Remove
  # this to only look in the same namespace as the MetricsInstance CR.
  probeNamespaceSelector: {}
  probeSelector:
    matchLabels:
      instance: primary # Your probe resources must include this label to be detected by the MetricsInstance Resource
